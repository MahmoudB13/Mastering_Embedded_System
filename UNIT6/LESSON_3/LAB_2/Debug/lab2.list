
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000308  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000308  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008fd  00000000  00000000  00010331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001a5  00000000  00000000  00010c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00010dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c49  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000618  00000000  00000000  00012aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007f0d  00000000  00000000  000130c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001afce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  0001b04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e8 	.word	0x080002e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e8 	.word	0x080002e8

08000170 <init>:

#define RCC_CFGR *((volatile unsigned int*)(RCC_BASE+0x4))
#define RCC_CR *((volatile unsigned int*)(RCC_BASE+0x0))

void init()
{	
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_CFGR |= (0b10<<0); //SW
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <init+0x54>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <init+0x54>)
 800017a:	f043 0302 	orr.w	r3, r3, #2
 800017e:	6013      	str	r3, [r2, #0]

	RCC_CFGR |= (0b0110<<18); //PLLMUL 8
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <init+0x54>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0f      	ldr	r2, [pc, #60]	; (80001c4 <init+0x54>)
 8000186:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800018a:	6013      	str	r3, [r2, #0]
	
	RCC_CFGR |= (1<<10); //set APB1 to be divided by 2
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <init+0x54>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <init+0x54>)
 8000192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000196:	6013      	str	r3, [r2, #0]

	RCC_CFGR |= (1<<11);
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <init+0x54>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <init+0x54>)
 800019e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001a2:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (1<<13); //set APB2 to be divided by 4
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <init+0x54>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a06      	ldr	r2, [pc, #24]	; (80001c4 <init+0x54>)
 80001aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ae:	6013      	str	r3, [r2, #0]
	
	RCC_CR |= (1<<24); //PLL on
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <init+0x58>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <init+0x58>)
 80001b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001ba:	6013      	str	r3, [r2, #0]
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40021004 	.word	0x40021004
 80001c8:	40021000 	.word	0x40021000

080001cc <main>:

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	init();
 80001d2:	f7ff ffcd 	bl	8000170 <init>
	volatile int i;
	RCC_APB2ENR |= (1<<2);
 80001d6:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <main+0x74>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <main+0x74>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	6013      	str	r3, [r2, #0]
	PORTA_CRH &= 0Xff0fffff;
 80001e2:	4b18      	ldr	r3, [pc, #96]	; (8000244 <main+0x78>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a17      	ldr	r2, [pc, #92]	; (8000244 <main+0x78>)
 80001e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ec:	6013      	str	r3, [r2, #0]
	PORTA_CRH |= 0X00200000;
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x78>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <main+0x78>)
 80001f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f8:	6013      	str	r3, [r2, #0]
	while(1)
	{
		PORTA_ODR |= (1<<13);
 80001fa:	4b13      	ldr	r3, [pc, #76]	; (8000248 <main+0x7c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a12      	ldr	r2, [pc, #72]	; (8000248 <main+0x7c>)
 8000200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000204:	6013      	str	r3, [r2, #0]
 		for(i=0;i<5000;i++);
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e002      	b.n	8000212 <main+0x46>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f241 3287 	movw	r2, #4999	; 0x1387
 8000218:	4293      	cmp	r3, r2
 800021a:	ddf7      	ble.n	800020c <main+0x40>
		PORTA_ODR &= ~(1<<13);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <main+0x7c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <main+0x7c>)
 8000222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000226:	6013      	str	r3, [r2, #0]
		for(i=0;i<5000;i++);
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	e002      	b.n	8000234 <main+0x68>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f241 3287 	movw	r2, #4999	; 0x1387
 800023a:	4293      	cmp	r3, r2
 800023c:	ddf7      	ble.n	800022e <main+0x62>
		PORTA_ODR |= (1<<13);
 800023e:	e7dc      	b.n	80001fa <main+0x2e>
 8000240:	40021018 	.word	0x40021018
 8000244:	40010804 	.word	0x40010804
 8000248:	4001080c 	.word	0x4001080c

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000250:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490d      	ldr	r1, [pc, #52]	; (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ffa5 	bl	80001cc <main>

08000282 <LoopForever>:

LoopForever:
    b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC1_2_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	2500      	movs	r5, #0
 80002a4:	4e0c      	ldr	r6, [pc, #48]	; (80002d8 <__libc_init_array+0x38>)
 80002a6:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a8:	1ba4      	subs	r4, r4, r6
 80002aa:	10a4      	asrs	r4, r4, #2
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	f000 f81a 	bl	80002e8 <_init>
 80002b4:	2500      	movs	r5, #0
 80002b6:	4e0a      	ldr	r6, [pc, #40]	; (80002e0 <__libc_init_array+0x40>)
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <__libc_init_array+0x44>)
 80002ba:	1ba4      	subs	r4, r4, r6
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c8:	4798      	blx	r3
 80002ca:	3501      	adds	r5, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d2:	4798      	blx	r3
 80002d4:	3501      	adds	r5, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
