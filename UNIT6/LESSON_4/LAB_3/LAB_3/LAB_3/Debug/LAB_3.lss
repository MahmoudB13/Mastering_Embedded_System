
LAB_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e0  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f7  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000596  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000015e  0000015e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000038  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_2 00000038  000000a4  000000a4  00000118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_3 00000038  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000034  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_2>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_3>
  10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000015e <__bad_interrupt>:
 15e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

0000006c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTD |= 1<<5;
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_1+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_1+0x26>
  92:	00 00       	nop
    _delay_ms(1000);
}
  94:	9f 91       	pop	r25
  96:	8f 91       	pop	r24
  98:	2f 91       	pop	r18
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

Disassembly of section .text.__vector_2:

000000a4 <__vector_2>:
ISR(INT1_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	PORTD |= 1<<6;
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__vector_2+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <__vector_2+0x26>
  ca:	00 00       	nop
    _delay_ms(1000);
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

Disassembly of section .text.__vector_3:

000000dc <__vector_3>:
ISR(INT2_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	PORTD |= 1<<7;
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_3+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_3+0x26>
 102:	00 00       	nop
    _delay_ms(1000);
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

Disassembly of section .text.main:

00000114 <main>:

int main(void) {
    DDRD = 0xF0;
 114:	80 ef       	ldi	r24, 0xF0	; 240
 116:	81 bb       	out	0x11, r24	; 17
    DDRB = 0;
 118:	17 ba       	out	0x17, r1	; 23
    MCUCR |= 0b1101;
 11a:	85 b7       	in	r24, 0x35	; 53
 11c:	8d 60       	ori	r24, 0x0D	; 13
 11e:	85 bf       	out	0x35, r24	; 53
    MCUCSR &= ~(1<<6);
 120:	84 b7       	in	r24, 0x34	; 52
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	84 bf       	out	0x34, r24	; 52
    GICR |= (0b111<<5);
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 6e       	ori	r24, 0xE0	; 224
 12a:	8b bf       	out	0x3b, r24	; 59
    sei();
 12c:	78 94       	sei
    while(1)
    {
        PORTD &= ~((1<<5) | (1<<6) | (1<<7)) ;
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	8f 71       	andi	r24, 0x1F	; 31
 132:	82 bb       	out	0x12, r24	; 18
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x26>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x30>
 144:	00 00       	nop
 146:	f3 cf       	rjmp	.-26     	; 0x12e <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000166 <_fini>:
 166:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000168 <__funcs_on_exit>:
 168:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000016a <__simulator_exit>:
 16a:	08 95       	ret

Disassembly of section .text.exit:

00000148 <exit>:
 148:	ec 01       	movw	r28, r24
 14a:	0e 94 b4 00 	call	0x168	; 0x168 <__funcs_on_exit>
 14e:	0e 94 b3 00 	call	0x166	; 0x166 <_fini>
 152:	ce 01       	movw	r24, r28
 154:	0e 94 b5 00 	call	0x16a	; 0x16a <__simulator_exit>
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 b1 00 	call	0x162	; 0x162 <_Exit>

Disassembly of section .text._Exit:

00000162 <_Exit>:
 162:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
