
LEDS WITH BUTTON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000016b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000758  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000192  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000038  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000a4  000000a4  00000118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define DDRC *((volatile unsigned char*)(0x34))
#define PORTC *((volatile unsigned char*)(0x35))

int main(void)
{
	DDRA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC=0x00;
  70:	14 ba       	out	0x14, r1	; 20
	PORTC=0x01;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	85 bb       	out	0x15, r24	; 21
	
    while(1)
    {
        //TODO:: Please write your application code 
		int count = 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
		while(count<8)
  7a:	10 c0       	rjmp	.+32     	; 0x9c <main+0x30>
		if(GET_BIT(PINC,0)==0)
  7c:	98 99       	sbic	0x13, 0	; 19
  7e:	0e c0       	rjmp	.+28     	; 0x9c <main+0x30>
		{
			SET_BIT(PORTA,count);
  80:	4b b3       	in	r20, 0x1b	; 27
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	08 2e       	mov	r0, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <main+0x1e>
  92:	24 2b       	or	r18, r20
  94:	2b bb       	out	0x1b, r18	; 27
			while(GET_BIT(PINC,0)==0);
  96:	98 9b       	sbis	0x13, 0	; 19
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x2a>
			count++;
  9a:	01 96       	adiw	r24, 0x01	; 1
	
    while(1)
    {
        //TODO:: Please write your application code 
		int count = 0;
		while(count<8)
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	91 05       	cpc	r25, r1
  a0:	6c f3       	brlt	.-38     	; 0x7c <main+0x10>
  a2:	e9 cf       	rjmp	.-46     	; 0x76 <main+0xa>

Disassembly of section .text.__dummy_fini:

000000c2 <_fini>:
  c2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000c4 <__funcs_on_exit>:
  c4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000c6 <__simulator_exit>:
  c6:	08 95       	ret

Disassembly of section .text.exit:

000000a4 <exit>:
  a4:	ec 01       	movw	r28, r24
  a6:	0e 94 62 00 	call	0xc4	; 0xc4 <__funcs_on_exit>
  aa:	0e 94 61 00 	call	0xc2	; 0xc2 <_fini>
  ae:	ce 01       	movw	r24, r28
  b0:	0e 94 63 00 	call	0xc6	; 0xc6 <__simulator_exit>
  b4:	ce 01       	movw	r24, r28
  b6:	0e 94 5f 00 	call	0xbe	; 0xbe <_Exit>

Disassembly of section .text._Exit:

000000be <_Exit>:
  be:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
