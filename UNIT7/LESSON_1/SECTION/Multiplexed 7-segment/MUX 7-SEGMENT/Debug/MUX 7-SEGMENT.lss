
MUX 7-SEGMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001a7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085d  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057b  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000074  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define DDRC *((volatile unsigned char*)(0x34))
#define PORTC *((volatile unsigned char*)(0x35))

int main(void)
{
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	31 c0       	rjmp	.+98     	; 0xd8 <main+0x6c>
			for(int j =0;j<10;j++)
			{
				int delay =20;
				while(delay--)
				{
					PORTC=(j<<4)|(1<<2);
  76:	ca 01       	movw	r24, r20
  78:	82 95       	swap	r24
  7a:	92 95       	swap	r25
  7c:	90 7f       	andi	r25, 0xF0	; 240
  7e:	98 27       	eor	r25, r24
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	98 27       	eor	r25, r24
  84:	84 60       	ori	r24, 0x04	; 4
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e1       	ldi	r24, 0x1F	; 31
  8a:	9e e4       	ldi	r25, 0x4E	; 78
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
					_delay_ms(10);
					PORTC=(i<<4)|(1<<3);
  94:	cb 01       	movw	r24, r22
  96:	82 95       	swap	r24
  98:	92 95       	swap	r25
  9a:	90 7f       	andi	r25, 0xF0	; 240
  9c:	98 27       	eor	r25, r24
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	98 27       	eor	r25, r24
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	8f e1       	ldi	r24, 0x1F	; 31
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
		for(int i=0;i<10;i++)
		{
			for(int j =0;j<10;j++)
			{
				int delay =20;
				while(delay--)
  b2:	c9 01       	movw	r24, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x4e>
  b6:	84 e1       	ldi	r24, 0x14	; 20
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9c 01       	movw	r18, r24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	31 09       	sbc	r19, r1
  c0:	89 2b       	or	r24, r25
  c2:	c9 f6       	brne	.-78     	; 0x76 <main+0xa>
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
		{
			for(int j =0;j<10;j++)
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	4a 30       	cpi	r20, 0x0A	; 10
  d0:	51 05       	cpc	r21, r1
  d2:	8c f3       	brlt	.-30     	; 0xb6 <main+0x4a>
{
	DDRC = 0xFF;
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
  d8:	6a 30       	cpi	r22, 0x0A	; 10
  da:	71 05       	cpc	r23, r1
  dc:	b4 f3       	brlt	.-20     	; 0xca <main+0x5e>
  de:	c8 cf       	rjmp	.-112    	; 0x70 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000fe <_fini>:
  fe:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000100 <__funcs_on_exit>:
 100:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000102 <__simulator_exit>:
 102:	08 95       	ret

Disassembly of section .text.exit:

000000e0 <exit>:
  e0:	ec 01       	movw	r28, r24
  e2:	0e 94 80 00 	call	0x100	; 0x100 <__funcs_on_exit>
  e6:	0e 94 7f 00 	call	0xfe	; 0xfe <_fini>
  ea:	ce 01       	movw	r24, r28
  ec:	0e 94 81 00 	call	0x102	; 0x102 <__simulator_exit>
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 7d 00 	call	0xfa	; 0xfa <_Exit>

Disassembly of section .text._Exit:

000000fa <_Exit>:
  fa:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
