
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000163  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000554  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000b2  000000b2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000030  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  0000009c  0000009c  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define DDRD   *((volatile unsigned char*)(0x31))
#define PORTD  *((volatile unsigned char*)(0x32))

int main(void)
{
	SET_BIT(DDRD,4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	81 bb       	out	0x11, r24	; 17
	CLEAR_BIT(DDRD,0);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
        //TODO:: Please write your application code 
		if(GET_BIT(PIND,0)==1)
  78:	80 9b       	sbis	0x10, 0	; 16
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0xc>
		{
			SET_BIT(PORTD,4);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
			_delay_ms(1000);
			CLEAR_BIT(PORTD,4);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	82 bb       	out	0x12, r24	; 18
  9a:	ee cf       	rjmp	.-36     	; 0x78 <main+0xc>

Disassembly of section .text.__dummy_fini:

000000ba <_fini>:
  ba:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000bc <__funcs_on_exit>:
  bc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000be <__simulator_exit>:
  be:	08 95       	ret

Disassembly of section .text.exit:

0000009c <exit>:
  9c:	ec 01       	movw	r28, r24
  9e:	0e 94 5e 00 	call	0xbc	; 0xbc <__funcs_on_exit>
  a2:	0e 94 5d 00 	call	0xba	; 0xba <_fini>
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 5f 00 	call	0xbe	; 0xbe <__simulator_exit>
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Exit>

Disassembly of section .text._Exit:

000000b6 <_Exit>:
  b6:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
