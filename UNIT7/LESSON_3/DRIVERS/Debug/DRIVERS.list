
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000450  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000580  08000588  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000580  08000580  00010588  2**0
                  CONTENTS
  4 .ARM          00000000  08000580  08000580  00010588  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000580  08000588  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000588  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000588  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000191b  00000000  00000000  000105b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000429  00000000  00000000  00011ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000122f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00012808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001afe  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c6a  00000000  00000000  0001439e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000762f  00000000  00000000  00015008  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c637  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000568 	.word	0x08000568

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000568 	.word	0x08000568

08000170 <Get_PIN_Position>:
 * RETURN VALUE: 	it return the position of the PIN
 * NOTES: 			----
 * --------------------------------------------------------------
 */
uint8_t Get_PIN_Position(uint16_t GPIO_PIN_NUMBER)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PIN_NUMBER)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_PIN_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_PIN_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_PIN_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_PIN_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_PIN_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_PIN_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_PIN_Position+0x7a>
 8000198:	e037      	b.n	800020a <Get_PIN_Position+0x9a>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_PIN_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_PIN_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_PIN_Position+0x8a>
 80001a6:	e030      	b.n	800020a <Get_PIN_Position+0x9a>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d023      	beq.n	80001f6 <Get_PIN_Position+0x86>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_PIN_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d019      	beq.n	80001ee <Get_PIN_Position+0x7e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d018      	beq.n	80001f2 <Get_PIN_Position+0x82>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d011      	beq.n	80001ea <Get_PIN_Position+0x7a>
 80001c6:	e020      	b.n	800020a <Get_PIN_Position+0x9a>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d017      	beq.n	80001fe <Get_PIN_Position+0x8e>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_PIN_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d00f      	beq.n	80001fa <Get_PIN_Position+0x8a>
 80001da:	e016      	b.n	800020a <Get_PIN_Position+0x9a>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d00f      	beq.n	8000202 <Get_PIN_Position+0x92>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d00e      	beq.n	8000206 <Get_PIN_Position+0x96>
 80001e8:	e00f      	b.n	800020a <Get_PIN_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e00e      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e00c      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e00a      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e008      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e006      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e004      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e002      	b.n	800020c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e000      	b.n	800020c <Get_PIN_Position+0x9c>
		break;
	}

	return 0;
 800020a:	2300      	movs	r3, #0
}
 800020c:	4618      	mov	r0, r3
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr

08000216 <MCAL_GPIO_Init>:
 * NOTES: 			STM32F103C6 MCU has GPIO A,B,C,D,E Modules but LQFP48 Package has only GPIO A,B Part of C,D
 * 					exported as external PINs from the MCU.
 * --------------------------------------------------------------
 */
void MCAL_GPIO_Init (GPIO_typedef *GPIOx, GPIO_PinConfig_t *PIN_Config)
{
 8000216:	b590      	push	{r4, r7, lr}
 8000218:	b085      	sub	sp, #20
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
 800021e:	6039      	str	r1, [r7, #0]
	//CRL register is used to configure PINS 0->7
	//CRH register is used to configure PINS 8->15
	volatile uint32_t* config_reg = NULL;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
	if((PIN_Config->GPIO_PIN_NUMBER)<GPIO_PIN_8)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d802      	bhi.n	8000232 <MCAL_GPIO_Init+0x1c>
	{
		config_reg = &GPIOx->CRL;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e002      	b.n	8000238 <MCAL_GPIO_Init+0x22>
	}
	else
	{
		config_reg = &GPIOx->CRH;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3304      	adds	r3, #4
 8000236:	60fb      	str	r3, [r7, #12]
	}

	//CLEAR CNFx AND MODEx FOR THE SPECIFIED PIN:
	(*config_reg) &= ~(0x0F<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER));
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <Get_PIN_Position>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	230f      	movs	r3, #15
 8000248:	4093      	lsls	r3, r2
 800024a:	43da      	mvns	r2, r3
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	401a      	ands	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]

	//IF THE PIN IS SET TO OUTPUT:
	if(PIN_Config->GPIO_MODE==GPIO_MODE_OUT_OPEN_DRAIN || PIN_Config->GPIO_MODE==GPIO_MODE_OUT_PUSH_PULL ||
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	789b      	ldrb	r3, [r3, #2]
 800025a:	2b05      	cmp	r3, #5
 800025c:	d00b      	beq.n	8000276 <MCAL_GPIO_Init+0x60>
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	2b04      	cmp	r3, #4
 8000264:	d007      	beq.n	8000276 <MCAL_GPIO_Init+0x60>
			PIN_Config->GPIO_MODE==AFIO_MODE_OUT_OPEN_DRAIN || PIN_Config->GPIO_MODE==AFIO_MODE_OUT_OPEN_DRAIN)
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	789b      	ldrb	r3, [r3, #2]
	if(PIN_Config->GPIO_MODE==GPIO_MODE_OUT_OPEN_DRAIN || PIN_Config->GPIO_MODE==GPIO_MODE_OUT_PUSH_PULL ||
 800026a:	2b07      	cmp	r3, #7
 800026c:	d003      	beq.n	8000276 <MCAL_GPIO_Init+0x60>
			PIN_Config->GPIO_MODE==AFIO_MODE_OUT_OPEN_DRAIN || PIN_Config->GPIO_MODE==AFIO_MODE_OUT_OPEN_DRAIN)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	2b07      	cmp	r3, #7
 8000274:	d125      	bne.n	80002c2 <MCAL_GPIO_Init+0xac>
	{
			//SET THE FREQUENCY OF THE OUTPUT PIN:
			*config_reg |= ((PIN_Config->GPIO_OUTPUT_FREQ)&0x3)<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	78db      	ldrb	r3, [r3, #3]
 800027a:	f003 0403 	and.w	r4, r3, #3
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff74 	bl	8000170 <Get_PIN_Position>
 8000288:	4603      	mov	r3, r0
 800028a:	fa04 f203 	lsl.w	r2, r4, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	431a      	orrs	r2, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]
			//SET THE OUTPUT MODE OF THE PIN:
			*config_reg |= ((((PIN_Config->GPIO_MODE)-4)<<2)&0xC)<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	3b04      	subs	r3, #4
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	f003 040c 	and.w	r4, r3, #12
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff61 	bl	8000170 <Get_PIN_Position>
 80002ae:	4603      	mov	r3, r0
 80002b0:	fa04 f203 	lsl.w	r2, r4, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	bf00      	nop
				*config_reg |= ((((PIN_Config->GPIO_MODE)-1)<<2)&0xC)<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER);
				//CLEAR THE ODR TO ENABLE PULL-DOWN:
				GPIOx->ODR  &= ~(PIN_Config->GPIO_PIN_NUMBER);
			}
	}
}
 80002c0:	e043      	b.n	800034a <MCAL_GPIO_Init+0x134>
			if(PIN_Config->GPIO_MODE==GPIO_MODE_ANALOG||PIN_Config->GPIO_MODE==GPIO_MODE_FLOATING_INPUT||PIN_Config->GPIO_MODE==GPIO_MODE_INPUT_PullUp)
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d007      	beq.n	80002da <MCAL_GPIO_Init+0xc4>
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d003      	beq.n	80002da <MCAL_GPIO_Init+0xc4>
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	789b      	ldrb	r3, [r3, #2]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d118      	bne.n	800030c <MCAL_GPIO_Init+0xf6>
				*config_reg |= (((PIN_Config->GPIO_MODE)<<2)&0xC)<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	f003 040c 	and.w	r4, r3, #12
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff41 	bl	8000170 <Get_PIN_Position>
 80002ee:	4603      	mov	r3, r0
 80002f0:	fa04 f203 	lsl.w	r2, r4, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]
				GPIOx->ODR  |= PIN_Config->GPIO_PIN_NUMBER;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	8812      	ldrh	r2, [r2, #0]
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
			if(PIN_Config->GPIO_MODE==GPIO_MODE_INPUT_PullDown)
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	789b      	ldrb	r3, [r3, #2]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d11a      	bne.n	800034a <MCAL_GPIO_Init+0x134>
				*config_reg |= ((((PIN_Config->GPIO_MODE)-1)<<2)&0xC)<<Get_PIN_Position(PIN_Config->GPIO_PIN_NUMBER);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	3b01      	subs	r3, #1
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	f003 040c 	and.w	r4, r3, #12
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff23 	bl	8000170 <Get_PIN_Position>
 800032a:	4603      	mov	r3, r0
 800032c:	fa04 f203 	lsl.w	r2, r4, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	431a      	orrs	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]
				GPIOx->ODR  &= ~(PIN_Config->GPIO_PIN_NUMBER);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	8812      	ldrh	r2, [r2, #0]
 8000342:	43d2      	mvns	r2, r2
 8000344:	401a      	ands	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	60da      	str	r2, [r3, #12]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bd90      	pop	{r4, r7, pc}

08000352 <MCAL_GPIO_ReadPin>:
 * RETURN VALUE: 	the I/P PIN Value (Two Values based on @REF GPIO_PIN_state >> SET or RESET).
 * NOTES:			----
 * --------------------------------------------------------------
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_typedef *GPIOx, uint16_t GPIO_PIN_NUMBER)
{
 8000352:	b480      	push	{r7}
 8000354:	b085      	sub	sp, #20
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	460b      	mov	r3, r1
 800035c:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;
	if(((GPIOx->IDR)&GPIO_PIN_NUMBER)!=GPIO_PIN_RESET)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	887b      	ldrh	r3, [r7, #2]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 800036a:	2301      	movs	r3, #1
 800036c:	73fb      	strb	r3, [r7, #15]
 800036e:	e001      	b.n	8000374 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <MCAL_GPIO_TogglePin>:
 * RETURN VALUE: 	void
 * NOTES: 			----
 * --------------------------------------------------------------
 */
void MCAL_GPIO_TogglePin (GPIO_typedef *GPIOx, uint16_t GPIO_PIN_NUMBER)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= GPIO_PIN_NUMBER;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	405a      	eors	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
	...

080003a4 <RCC_Init>:

#include "GPIO.h"
#include "STM32F103C6.h"

void RCC_Init()
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	//PORTA RCC CLOCK ENABLE:
	RCC_PORTA_CLK_EN();
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <RCC_Init+0x24>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <RCC_Init+0x24>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
	//PORTB RCC CLOCK ENABLE:
	RCC_PORTB_CLK_EN();
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <RCC_Init+0x24>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <RCC_Init+0x24>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <GPIO_Init>:

void GPIO_Init()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PIN_Conf;
	PIN_Conf.GPIO_PIN_NUMBER = GPIO_PIN_1;
 80003d2:	2302      	movs	r3, #2
 80003d4:	80bb      	strh	r3, [r7, #4]
	PIN_Conf.GPIO_MODE = GPIO_MODE_FLOATING_INPUT;
 80003d6:	2301      	movs	r3, #1
 80003d8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PORTA, &PIN_Conf);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4814      	ldr	r0, [pc, #80]	; (8000430 <GPIO_Init+0x64>)
 80003e0:	f7ff ff19 	bl	8000216 <MCAL_GPIO_Init>

	PIN_Conf.GPIO_PIN_NUMBER = GPIO_PIN_13;
 80003e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e8:	80bb      	strh	r3, [r7, #4]
	PIN_Conf.GPIO_MODE = GPIO_MODE_FLOATING_INPUT;
 80003ea:	2301      	movs	r3, #1
 80003ec:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PORTA, &PIN_Conf);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	480f      	ldr	r0, [pc, #60]	; (8000430 <GPIO_Init+0x64>)
 80003f4:	f7ff ff0f 	bl	8000216 <MCAL_GPIO_Init>

	PIN_Conf.GPIO_PIN_NUMBER = GPIO_PIN_1;
 80003f8:	2302      	movs	r3, #2
 80003fa:	80bb      	strh	r3, [r7, #4]
	PIN_Conf.GPIO_MODE = GPIO_MODE_OUT_PUSH_PULL;
 80003fc:	2304      	movs	r3, #4
 80003fe:	71bb      	strb	r3, [r7, #6]
	PIN_Conf.GPIO_OUTPUT_FREQ = GPIO_OUTPUT_FREQ_10MHz;
 8000400:	2301      	movs	r3, #1
 8000402:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(PORTB, &PIN_Conf);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	480a      	ldr	r0, [pc, #40]	; (8000434 <GPIO_Init+0x68>)
 800040a:	f7ff ff04 	bl	8000216 <MCAL_GPIO_Init>

	PIN_Conf.GPIO_PIN_NUMBER = GPIO_PIN_13;
 800040e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000412:	80bb      	strh	r3, [r7, #4]
	PIN_Conf.GPIO_MODE = GPIO_MODE_OUT_PUSH_PULL;
 8000414:	2304      	movs	r3, #4
 8000416:	71bb      	strb	r3, [r7, #6]
	PIN_Conf.GPIO_OUTPUT_FREQ = GPIO_OUTPUT_FREQ_10MHz;
 8000418:	2301      	movs	r3, #1
 800041a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(PORTB, &PIN_Conf);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <GPIO_Init+0x68>)
 8000422:	f7ff fef8 	bl	8000216 <MCAL_GPIO_Init>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00

08000438 <delay>:

void delay(int x)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0;i<x;i++)
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	e00b      	b.n	800045e <delay+0x26>
	{
		for(j=0;j<255;j++);
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	e002      	b.n	8000452 <delay+0x1a>
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	3301      	adds	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	2bfe      	cmp	r3, #254	; 0xfe
 8000456:	ddf9      	ble.n	800044c <delay+0x14>
	for(i=0;i<x;i++)
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3301      	adds	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	dbef      	blt.n	8000446 <delay+0xe>
	}
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <main>:

int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	RCC_Init();
 8000474:	f7ff ff96 	bl	80003a4 <RCC_Init>
	GPIO_Init();
 8000478:	f7ff ffa8 	bl	80003cc <GPIO_Init>
    /* Loop forever */
	while(1)
	{
		if(MCAL_GPIO_ReadPin(PORTA, GPIO_PIN_1)==0)
 800047c:	2102      	movs	r1, #2
 800047e:	4811      	ldr	r0, [pc, #68]	; (80004c4 <main+0x54>)
 8000480:	f7ff ff67 	bl	8000352 <MCAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10b      	bne.n	80004a2 <main+0x32>
		{
			MCAL_GPIO_TogglePin(PORTB, GPIO_PIN_1);
 800048a:	2102      	movs	r1, #2
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <main+0x58>)
 800048e:	f7ff ff77 	bl	8000380 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(PORTA, GPIO_PIN_1)==0);
 8000492:	bf00      	nop
 8000494:	2102      	movs	r1, #2
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <main+0x54>)
 8000498:	f7ff ff5b 	bl	8000352 <MCAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f8      	beq.n	8000494 <main+0x24>
		}
		if(MCAL_GPIO_ReadPin(PORTA, GPIO_PIN_13)==1)
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <main+0x54>)
 80004a8:	f7ff ff53 	bl	8000352 <MCAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d104      	bne.n	80004bc <main+0x4c>
		{
			MCAL_GPIO_TogglePin(PORTB, GPIO_PIN_13);
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <main+0x58>)
 80004b8:	f7ff ff62 	bl	8000380 <MCAL_GPIO_TogglePin>
		}
		delay(255);
 80004bc:	20ff      	movs	r0, #255	; 0xff
 80004be:	f7ff ffbb 	bl	8000438 <delay>
		if(MCAL_GPIO_ReadPin(PORTA, GPIO_PIN_1)==0)
 80004c2:	e7db      	b.n	800047c <main+0xc>
 80004c4:	40010800 	.word	0x40010800
 80004c8:	40010c00 	.word	0x40010c00

080004cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	; (800050c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <LoopForever+0xe>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <LoopForever+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fa:	f000 f811 	bl	8000520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff ffb7 	bl	8000470 <main>

08000502 <LoopForever>:

LoopForever:
    b LoopForever
 8000502:	e7fe      	b.n	8000502 <LoopForever>
  ldr   r0, =_estack
 8000504:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000510:	08000588 	.word	0x08000588
  ldr r2, =_sbss
 8000514:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000518:	2000001c 	.word	0x2000001c

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>
	...

08000520 <__libc_init_array>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2500      	movs	r5, #0
 8000524:	4e0c      	ldr	r6, [pc, #48]	; (8000558 <__libc_init_array+0x38>)
 8000526:	4c0d      	ldr	r4, [pc, #52]	; (800055c <__libc_init_array+0x3c>)
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	42a5      	cmp	r5, r4
 800052e:	d109      	bne.n	8000544 <__libc_init_array+0x24>
 8000530:	f000 f81a 	bl	8000568 <_init>
 8000534:	2500      	movs	r5, #0
 8000536:	4e0a      	ldr	r6, [pc, #40]	; (8000560 <__libc_init_array+0x40>)
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <__libc_init_array+0x44>)
 800053a:	1ba4      	subs	r4, r4, r6
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	42a5      	cmp	r5, r4
 8000540:	d105      	bne.n	800054e <__libc_init_array+0x2e>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000548:	4798      	blx	r3
 800054a:	3501      	adds	r5, #1
 800054c:	e7ee      	b.n	800052c <__libc_init_array+0xc>
 800054e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000552:	4798      	blx	r3
 8000554:	3501      	adds	r5, #1
 8000556:	e7f2      	b.n	800053e <__libc_init_array+0x1e>
 8000558:	08000580 	.word	0x08000580
 800055c:	08000580 	.word	0x08000580
 8000560:	08000580 	.word	0x08000580
 8000564:	08000584 	.word	0x08000584

08000568 <_init>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr

08000574 <_fini>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr
