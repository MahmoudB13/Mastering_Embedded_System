
LCD_KEYPAD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000392  00000446  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012cc  00000000  00000000  0000052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079c  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068a  00000000  00000000  00001f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031c  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000374  00000374  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.KEYPAD_INIT 0000000a  0000036a  0000036a  0000041e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000010  00800060  00000382  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.KEYPAD_GET_CHAR 000000ce  000000b4  000000b4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_KICK 0000001a  00000322  00000322  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_WRITE_COMMAND 00000046  000002b2  000002b2  00000366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_MOVE_CURSOR 0000004a  00000268  00000268  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_WRITE_CHAR 0000008e  00000182  00000182  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_CLEAR 00000018  0000033c  0000033c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_INIT 00000058  00000210  00000210  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.cursor_pos 00000002  00800070  00800070  00000446  2**0
                  ALLOC
 24 .text.main    0000002a  000002f8  000002f8  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  0000037c  0000037c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  0000037e  0000037e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  00000380  00000380  00000434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000354  00000354  00000408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  00000378  00000378  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
   8:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
   c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  10:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  14:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  18:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  1c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  20:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  24:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  28:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  2c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  30:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  34:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  38:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  3c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  40:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  44:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  48:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  4c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  50:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 03       	mulsu	r16, r16
  5a:	82 00       	.word	0x0082	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	72 80       	ldd	r7, Z+2	; 0x02

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

00000374 <__bad_interrupt>:
 374:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.KEYPAD_INIT:

0000036a <KEYPAD_INIT>:

#include "KEYPAD.h"

void KEYPAD_INIT()
{
	DATA_DIR_KEYPAD = 0xF0;
 36a:	80 ef       	ldi	r24, 0xF0	; 240
 36c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	82 bb       	out	0x12, r24	; 18
 372:	08 95       	ret

Disassembly of section .text.KEYPAD_GET_CHAR:

000000b4 <KEYPAD_GET_CHAR>:
}

char KEYPAD_GET_CHAR()
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	60 97       	sbiw	r28, 0x10	; 16
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	char matrix[4][4]={{'7','4','1','c'},{'8','5','2','0'},{'9','6','3','='},{'/','*','-','+'}};
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	e0 e6       	ldi	r30, 0x60	; 96
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	8a 95       	dec	r24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <KEYPAD_GET_CHAR+0x1e>
	char input = '\0';
	int i,j;
	while(1)
	{
		for(i=0;i<4;i++)
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	43 c0       	rjmp	.+134    	; 0x166 <KEYPAD_GET_CHAR+0xb2>
		{
			CLEAR_BIT(KEYPAD_PORT,(i+4));
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	9b 01       	movw	r18, r22
  e4:	2c 5f       	subi	r18, 0xFC	; 252
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <KEYPAD_GET_CHAR+0x3e>
  ee:	44 0f       	add	r20, r20
  f0:	55 1f       	adc	r21, r21
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <KEYPAD_GET_CHAR+0x3a>
  f6:	e4 2f       	mov	r30, r20
  f8:	94 2f       	mov	r25, r20
  fa:	90 95       	com	r25
  fc:	89 23       	and	r24, r25
  fe:	82 bb       	out	0x12, r24	; 18
			for(j=0;j<4;j++)
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	28 c0       	rjmp	.+80     	; 0x156 <KEYPAD_GET_CHAR+0xa2>
			{
				if(GET_BIT(PIND,j)==0)
 106:	80 b3       	in	r24, 0x10	; 16
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <KEYPAD_GET_CHAR+0x5e>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <KEYPAD_GET_CHAR+0x5a>
 116:	80 fd       	sbrc	r24, 0
 118:	1c c0       	rjmp	.+56     	; 0x152 <KEYPAD_GET_CHAR+0x9e>
				{
					while(GET_BIT(PIND,j)==0);
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 2e       	mov	r0, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <KEYPAD_GET_CHAR+0x72>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <KEYPAD_GET_CHAR+0x6e>
 12a:	80 ff       	sbrs	r24, 0
 12c:	f6 cf       	rjmp	.-20     	; 0x11a <KEYPAD_GET_CHAR+0x66>
					input = matrix[i][j];
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	8c 0f       	add	r24, r28
 13c:	9d 1f       	adc	r25, r29
 13e:	68 0f       	add	r22, r24
 140:	79 1f       	adc	r23, r25
 142:	db 01       	movw	r26, r22
 144:	a2 0f       	add	r26, r18
 146:	b3 1f       	adc	r27, r19
 148:	8c 91       	ld	r24, X
					SET_BIT(KEYPAD_PORT,(i+4));
 14a:	92 b3       	in	r25, 0x12	; 18
 14c:	e9 2b       	or	r30, r25
 14e:	e2 bb       	out	0x12, r30	; 18
					return input;
 150:	0f c0       	rjmp	.+30     	; 0x170 <KEYPAD_GET_CHAR+0xbc>
	while(1)
	{
		for(i=0;i<4;i++)
		{
			CLEAR_BIT(KEYPAD_PORT,(i+4));
			for(j=0;j<4;j++)
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	24 30       	cpi	r18, 0x04	; 4
 158:	31 05       	cpc	r19, r1
 15a:	ac f2       	brlt	.-86     	; 0x106 <KEYPAD_GET_CHAR+0x52>
					input = matrix[i][j];
					SET_BIT(KEYPAD_PORT,(i+4));
					return input;
				}
			}
			SET_BIT(KEYPAD_PORT,(i+4));
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	48 2b       	or	r20, r24
 160:	42 bb       	out	0x12, r20	; 18
	char matrix[4][4]={{'7','4','1','c'},{'8','5','2','0'},{'9','6','3','='},{'/','*','-','+'}};
	char input = '\0';
	int i,j;
	while(1)
	{
		for(i=0;i<4;i++)
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	64 30       	cpi	r22, 0x04	; 4
 168:	71 05       	cpc	r23, r1
 16a:	0c f4       	brge	.+2      	; 0x16e <KEYPAD_GET_CHAR+0xba>
 16c:	b9 cf       	rjmp	.-142    	; 0xe0 <KEYPAD_GET_CHAR+0x2c>
 16e:	b5 cf       	rjmp	.-150    	; 0xda <KEYPAD_GET_CHAR+0x26>
				}
			}
			SET_BIT(KEYPAD_PORT,(i+4));
		}
	}
 170:	60 96       	adiw	r28, 0x10	; 16
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

Disassembly of section .text.LCD_KICK:

00000322 <LCD_KICK>:
{
	while(*str!='\0')
	{
		LCD_WRITE_CHAR(*str++);
	}
}
 322:	88 b3       	in	r24, 0x18	; 24
 324:	88 60       	ori	r24, 0x08	; 8
 326:	88 bb       	out	0x18, r24	; 24
 328:	83 ed       	ldi	r24, 0xD3	; 211
 32a:	90 e3       	ldi	r25, 0x30	; 48
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_KICK+0xa>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_KICK+0x10>
 332:	00 00       	nop
 334:	88 b3       	in	r24, 0x18	; 24
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	88 bb       	out	0x18, r24	; 24
 33a:	08 95       	ret

Disassembly of section .text.LCD_WRITE_COMMAND:

000002b2 <LCD_WRITE_COMMAND>:
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
 2b6:	8b b3       	in	r24, 0x1b	; 27
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	9c 2f       	mov	r25, r28
 2bc:	90 7f       	andi	r25, 0xF0	; 240
 2be:	89 2b       	or	r24, r25
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	8b 7f       	andi	r24, 0xFB	; 251
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	88 b3       	in	r24, 0x18	; 24
 2ca:	8d 7f       	andi	r24, 0xFD	; 253
 2cc:	88 bb       	out	0x18, r24	; 24
 2ce:	0e 94 91 01 	call	0x322	; 0x322 <LCD_KICK>
 2d2:	2b b3       	in	r18, 0x1b	; 27
 2d4:	30 e1       	ldi	r19, 0x10	; 16
 2d6:	c3 9f       	mul	r28, r19
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	92 2f       	mov	r25, r18
 2de:	9f 70       	andi	r25, 0x0F	; 15
 2e0:	89 2b       	or	r24, r25
 2e2:	8b bb       	out	0x1b, r24	; 27
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	88 b3       	in	r24, 0x18	; 24
 2ec:	8d 7f       	andi	r24, 0xFD	; 253
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	0e 94 91 01 	call	0x322	; 0x322 <LCD_KICK>
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

Disassembly of section .text.LCD_MOVE_CURSOR:

00000268 <LCD_MOVE_CURSOR>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	c8 2f       	mov	r28, r24
 26e:	d6 2f       	mov	r29, r22
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	61 f4       	brne	.+24     	; 0x28c <LCD_MOVE_CURSOR+0x24>
 274:	60 31       	cpi	r22, 0x10	; 16
 276:	50 f4       	brcc	.+20     	; 0x28c <LCD_MOVE_CURSOR+0x24>
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	86 0f       	add	r24, r22
 27c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 280:	8d 2f       	mov	r24, r29
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <cursor_pos+0x1>
 288:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <cursor_pos>
 28c:	c2 30       	cpi	r28, 0x02	; 2
 28e:	71 f4       	brne	.+28     	; 0x2ac <LCD_MOVE_CURSOR+0x44>
 290:	d0 31       	cpi	r29, 0x10	; 16
 292:	60 f4       	brcc	.+24     	; 0x2ac <LCD_MOVE_CURSOR+0x44>
 294:	80 ec       	ldi	r24, 0xC0	; 192
 296:	8d 0f       	add	r24, r29
 298:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 29c:	6d 2f       	mov	r22, r29
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	60 5f       	subi	r22, 0xF0	; 240
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <cursor_pos+0x1>
 2a8:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <cursor_pos>
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

Disassembly of section .text.LCD_WRITE_CHAR:

00000182 <LCD_WRITE_CHAR>:
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <cursor_pos>
 18a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <cursor_pos+0x1>
 18e:	40 97       	sbiw	r24, 0x10	; 16
 190:	21 f4       	brne	.+8      	; 0x19a <LCD_WRITE_CHAR+0x18>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 34 01 	call	0x268	; 0x268 <LCD_MOVE_CURSOR>
 19a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <cursor_pos>
 19e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <cursor_pos+0x1>
 1a2:	80 97       	sbiw	r24, 0x20	; 32
 1a4:	59 f4       	brne	.+22     	; 0x1bc <LCD_WRITE_CHAR+0x3a>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 34 01 	call	0x268	; 0x268 <LCD_MOVE_CURSOR>
 1b4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <cursor_pos+0x1>
 1b8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <cursor_pos>
 1bc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <cursor_pos>
 1c0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <cursor_pos+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <cursor_pos+0x1>
 1ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <cursor_pos>
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	9c 2f       	mov	r25, r28
 1d4:	90 7f       	andi	r25, 0xF0	; 240
 1d6:	89 2b       	or	r24, r25
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_KICK>
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	30 e1       	ldi	r19, 0x10	; 16
 1ee:	c3 9f       	mul	r28, r19
 1f0:	c0 01       	movw	r24, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	92 2f       	mov	r25, r18
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	89 2b       	or	r24, r25
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	88 bb       	out	0x18, r24	; 24
 202:	88 b3       	in	r24, 0x18	; 24
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	88 bb       	out	0x18, r24	; 24
 208:	0e 94 91 01 	call	0x322	; 0x322 <LCD_KICK>
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

Disassembly of section .text.LCD_CLEAR:

0000033c <LCD_CLEAR>:
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
}

void LCD_CLEAR()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
	cursor_pos = 0;
 342:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <cursor_pos+0x1>
 346:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <cursor_pos>
	LCD_MOVE_CURSOR(1,0);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_MOVE_CURSOR>
 352:	08 95       	ret

Disassembly of section .text.LCD_INIT:

00000210 <LCD_INIT>:
{
	while(*str!='\0')
	{
		LCD_WRITE_CHAR(*str++);
	}
}
 210:	87 e8       	ldi	r24, 0x87	; 135
 212:	93 e1       	ldi	r25, 0x13	; 19
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_INIT+0x4>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_INIT+0xa>
 21a:	00 00       	nop
 21c:	87 b3       	in	r24, 0x17	; 23
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	87 bb       	out	0x17, r24	; 23
 222:	87 b3       	in	r24, 0x17	; 23
 224:	84 60       	ori	r24, 0x04	; 4
 226:	87 bb       	out	0x17, r24	; 23
 228:	87 b3       	in	r24, 0x17	; 23
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	88 bb       	out	0x18, r24	; 24
 234:	88 b3       	in	r24, 0x18	; 24
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	88 bb       	out	0x18, r24	; 24
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	87 7f       	andi	r24, 0xF7	; 247
 23e:	88 bb       	out	0x18, r24	; 24
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	8a bb       	out	0x1a, r24	; 26
 244:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_CLEAR>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 24e:	88 e2       	ldi	r24, 0x28	; 40
 250:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 266:	08 95       	ret

Disassembly of section .text.main:

000002f8 <main>:
#include "LCD_driver/LCD.h"
#include "KEYPAD_driver/KEYPAD.h"

int main(void)
{
	LCD_INIT();
 2f8:	0e 94 08 01 	call	0x210	; 0x210 <LCD_INIT>
	KEYPAD_INIT();
 2fc:	0e 94 b5 01 	call	0x36a	; 0x36a <KEYPAD_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	83 ed       	ldi	r24, 0xD3	; 211
 302:	90 e3       	ldi	r25, 0x30	; 48
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0xc>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x12>
 30a:	00 00       	nop
	_delay_ms(50);
    while(1)
    {
		char buffer = KEYPAD_GET_CHAR();
 30c:	0e 94 5a 00 	call	0xb4	; 0xb4 <__data_load_end>
		if(buffer=='c')
 310:	83 36       	cpi	r24, 0x63	; 99
 312:	21 f4       	brne	.+8      	; 0x31c <main+0x24>
		{
			LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_COMMAND>
 31a:	f8 cf       	rjmp	.-16     	; 0x30c <main+0x14>
		}
		else
		{
			LCD_WRITE_CHAR(buffer);	
 31c:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WRITE_CHAR>
 320:	f5 cf       	rjmp	.-22     	; 0x30c <main+0x14>

Disassembly of section .text.__dummy_fini:

0000037c <_fini>:
 37c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000037e <__funcs_on_exit>:
 37e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000380 <__simulator_exit>:
 380:	08 95       	ret

Disassembly of section .text.exit:

00000354 <exit>:
 354:	ec 01       	movw	r28, r24
 356:	0e 94 bf 01 	call	0x37e	; 0x37e <__funcs_on_exit>
 35a:	0e 94 be 01 	call	0x37c	; 0x37c <_fini>
 35e:	ce 01       	movw	r24, r28
 360:	0e 94 c0 01 	call	0x380	; 0x380 <__simulator_exit>
 364:	ce 01       	movw	r24, r28
 366:	0e 94 bc 01 	call	0x378	; 0x378 <_Exit>

Disassembly of section .text._Exit:

00000378 <_Exit>:
 378:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
